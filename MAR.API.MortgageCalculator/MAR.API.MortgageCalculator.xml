<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MAR.API.MortgageCalculator</name>
    </assembly>
    <members>
        <member name="T:MAR.API.MortgageCalculator.AppSettings">
            <summary>
            Application settings for the API
            </summary>
        </member>
        <member name="P:MAR.API.MortgageCalculator.AppSettings.ApplicationName">
            <summary>
            User friendly application name
            </summary>
        </member>
        <member name="P:MAR.API.MortgageCalculator.AppSettings.PublicPaidAccessUserId">
            <summary>
            Public paid access user id for testing
            </summary>
        </member>
        <member name="P:MAR.API.MortgageCalculator.AppSettings.PublicPaidAccessUserPassword">
            <summary>
            Public paid access user password for testing
            </summary>
        </member>
        <member name="T:MAR.API.MortgageCalculator.AuthorizationHeaders">
            <summary>
            For authorization requests
            </summary>
        </member>
        <member name="P:MAR.API.MortgageCalculator.AuthorizationHeaders.ClientId">
            <summary>
            Client id
            </summary>
        </member>
        <member name="P:MAR.API.MortgageCalculator.AuthorizationHeaders.Password">
            <summary>
            Password for client id
            </summary>
        </member>
        <member name="P:MAR.API.MortgageCalculator.AuthorizationHeaders.AuthorizationToken">
            <summary>
            Authorization token
            </summary>
        </member>
        <member name="T:MAR.API.MortgageCalculator.Controllers.AuthorizeController">
            <summary>
            Authorization controller
            </summary>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.AuthorizeController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Localization.IStringLocalizer{MAR.API.MortgageCalculator.Localization.ErrorMessages},Microsoft.Extensions.Localization.IStringLocalizer{MAR.API.MortgageCalculator.Localization.ValidationMessages},MAR.API.MortgageCalculator.Interfaces.IAuthTokenProvider,Microsoft.Extensions.Options.IOptions{MAR.API.MortgageCalculator.AppSettings})">
            <summary>
            Constructor
            </summary>
            <param name="loggerFactory"></param>
            <param name="errorMessagesLocalizer"></param>
            <param name="validationMessagesLocalizer"></param>
            <param name="authTokenProvider"></param>
            <param name="appSettings"></param>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.AuthorizeController.IssueToken(MAR.API.MortgageCalculator.AuthorizationHeaders)">
            <summary>
            Calculate (free)
            </summary>
            <param name="authHeaders"></param>
            <returns></returns>
        </member>
        <member name="T:MAR.API.MortgageCalculator.Controllers.CalculateController">
            <summary>
            Calculation controller
            </summary>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.CalculateController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Localization.IStringLocalizer{MAR.API.MortgageCalculator.Localization.ErrorMessages},Microsoft.Extensions.Localization.IStringLocalizer{MAR.API.MortgageCalculator.Localization.ValidationMessages},MAR.API.MortgageCalculator.Logic.Interfaces.IMortgageCalculatorFacade,MAR.API.MortgageCalculator.Interfaces.IAuthTokenProvider,Microsoft.Extensions.Options.IOptions{MAR.API.MortgageCalculator.AppSettings})">
            <summary>
            Constructor
            </summary>
            <param name="loggerFactory"></param>
            <param name="errorMessagesLocalizer"></param>
            <param name="validationMessagesLocalizer"></param>
            <param name="mortgageCalculatorFacade"></param>
            <param name="authTokenProvider"></param>
            <param name="appSettings"></param>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.CalculateController.Calculate(MAR.API.MortgageCalculator.Model.Requests.MortgageCalculationRequest)">
            <summary>
            Calculate (free)
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.CalculateController.CalculatePaid(MAR.API.MortgageCalculator.AuthorizationHeaders,MAR.API.MortgageCalculator.Model.Requests.MortgageCalculationRequest)">
            <summary>
            Calculate (paid)
            </summary>
            <param name="authHeaders"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:MAR.API.MortgageCalculator.Controllers.DomainBaseController">
            <summary>
            Shared logic amongst domain API controllers
            </summary>
        </member>
        <member name="P:MAR.API.MortgageCalculator.Controllers.DomainBaseController.TransactionId">
            <summary>
            Domain API transaction id
            </summary>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.DomainBaseController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,MAR.API.MortgageCalculator.Interfaces.IAuthTokenProvider,Microsoft.Extensions.Options.IOptions{MAR.API.MortgageCalculator.AppSettings})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.DomainBaseController.CheckAuthorizationHeadersForCredentials(MAR.API.MortgageCalculator.AuthorizationHeaders)">
            <summary>
            Checks auth headers to see if credentials were provided
            </summary>
            <param name="authHeaders"></param>
            <returns>true if credentials are present</returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.DomainBaseController.CheckAuthorizationHeadersForClientAndToken(MAR.API.MortgageCalculator.AuthorizationHeaders)">
            <summary>
            Checks auth headers to see if auth token was provided
            </summary>
            <param name="authHeaders"></param>
            <returns>true if token is present</returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.DomainBaseController.GetApiResponse(System.Object)">
            <summary>
            Get ApiResponse object
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.DomainBaseController.GetFailedAuthorizationResponse">
            <summary>
            Gets general failed auth result
            </summary>
            <returns></returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.DomainBaseController.GetUnauthorizedResponse">
            <summary>
            Gets unauthorized result
            </summary>
            <returns></returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.DomainBaseController.GetResultForMortageCalculation(MAR.API.MortgageCalculator.Model.Interfaces.IMortgageCalculationResult)">
            <summary>
            Get ActionResult from a mortgage calculation result
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.DomainBaseController.GetTransactionLoggingScope">
            <summary>
            Get transction level logging scope
            </summary>
            <returns></returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.DomainBaseController.GetApiVersion">
            <summary>
            Gets API's version
            </summary>
            <returns></returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.DomainBaseController.GetApplicationName">
            <summary>
            Gets API user friendly application name
            </summary>
            <returns></returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.DomainBaseController.SetTransactionId">
            <summary>
            Gets API request transaction Id
            </summary>
            <returns></returns>
        </member>
        <member name="T:MAR.API.MortgageCalculator.Controllers.HealthController">
            <summary>
            Health controller
            </summary>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.HealthController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,MAR.API.MortgageCalculator.Interfaces.IAuthTokenProvider,Microsoft.Extensions.Options.IOptions{MAR.API.MortgageCalculator.AppSettings})">
            <summary>
            Constructor
            </summary>
            <param name="loggerFactory"></param>
            <param name="authTokenProvider"></param>
            <param name="appSettings"></param>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Controllers.HealthController.HealthCheck">
            <summary>
            Health check endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="T:MAR.API.MortgageCalculator.Interfaces.IAuthTokenProvider">
            <summary>
            Authorization token provider interface
            </summary>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Interfaces.IAuthTokenProvider.ExpireAuthTokenForClientId(System.String)">
            <summary>
            Expires authorization token
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Interfaces.IAuthTokenProvider.GetAuthTokenForClientId(System.String)">
            <summary>
            Gets authorization token
            </summary>
            <returns>null if token is not found</returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Interfaces.IAuthTokenProvider.IsTokenStillValid(System.String,System.String)">
            <summary>
            Checks if client's token is still valid
            </summary>
            <param name="clientId"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Interfaces.IAuthTokenProvider.UpsertAuthTokenForClientId(System.String,System.String@)">
            <summary>
            Inserts or updates authorization token
            </summary>
            <param name="clientId"></param>
            <param name="token"></param>
            <returns>true if successful</returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Interfaces.IAuthTokenProvider.VerifyIsPaidUserAndIssueToken(System.String,System.String,System.String@)">
            <summary>
            Checks identity and issues token (if valid user)
            </summary>
            <param name="clientId"></param>
            <param name="password"></param>
            <param name="token"></param>
            <returns>true if successful</returns>
        </member>
        <member name="T:MAR.API.MortgageCalculator.Program">
            <summary>
            The program
            </summary>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Program.Main(System.String[])">
            <summary>
            The main entry points
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Program.CreateHostBuilder(System.String[])">
            <summary>
            Host builder
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:MAR.API.MortgageCalculator.Providers.AuthTokenProvider">
            <summary>
            Authorization token provider. This type of implementation only works for distributed systems if using distributed mem caching.
            Normally, you would want a dedicated microservice to handle authorization tokens and expiration.
            </summary>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Providers.AuthTokenProvider.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Options.IOptions{MAR.API.MortgageCalculator.AppSettings})">
            <summary>
            Constructor
            </summary>
            <param name="loggerFactory"></param>
            <param name="memoryCache"></param>
            <param name="appSettings"></param>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Providers.AuthTokenProvider.ExpireAuthTokenForClientId(System.String)">
            <summary>
            Expires authorization token
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Providers.AuthTokenProvider.GetAuthTokenForClientId(System.String)">
            <summary>
            Gets authorization token
            </summary>
            <returns>null if token is not found</returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Providers.AuthTokenProvider.IsTokenStillValid(System.String,System.String)">
            <summary>
            Checks if token is still valid for client
            </summary>
            <param name="clientId"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Providers.AuthTokenProvider.VerifyIsPaidUserAndIssueToken(System.String,System.String,System.String@)">
            <summary>
            Checks identity and issues token if successful. If token is already present, returns existing token.
            </summary>
            <param name="clientId"></param>
            <param name="password"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Providers.AuthTokenProvider.UpsertAuthTokenForClientId(System.String,System.String@)">
            <summary>
            Inserts authorization token. If already there, extends the expiration time.
            </summary>
            <param name="clientId"></param>
            <param name="token"></param>
            <returns>true if successful</returns>
        </member>
        <member name="T:MAR.API.MortgageCalculator.Startup">
            <summary>
            The startup
            </summary>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:MAR.API.MortgageCalculator.Startup.Configuration">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:MAR.API.MortgageCalculator.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Options.IOptions{MAR.API.MortgageCalculator.AppSettings})">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="memoryCache"></param>
            <param name="appSettings"></param>
        </member>
    </members>
</doc>
